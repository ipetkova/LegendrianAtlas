

# This file was *autogenerated* from the file AlexanderPolynomialCalculator.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
import sage
import os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import FileOperations

def get_alexander_polynomial(grid):
    X,O,n = grid[_sage_const_0 ],grid[_sage_const_1 ],len(grid[_sage_const_0 ])
    R = PolynomialRing(ZZ, 't', names=('t',)); (t,) = R._first_ngens(1)

    mat = [[_sage_const_0 ]*(n+_sage_const_1 ) for i in range(n+_sage_const_1 )]
    for r in range(n+_sage_const_1 ):
        mat[r][_sage_const_0 ] = _sage_const_1 
        for c in range(_sage_const_1 ,n+_sage_const_1 ):
            if X[c-_sage_const_1 ]<r and O[c-_sage_const_1 ]>=r:
                mat[r][c] = mat[r][c-_sage_const_1 ]*t
            elif X[c-_sage_const_1 ]>=r and O[c-_sage_const_1 ]<r:
                mat[r][c] = mat[r][c-_sage_const_1 ]*(t**-_sage_const_1 )
            else:
                mat[r][c] = mat[r][c-_sage_const_1 ]
    del mat[_sage_const_0 ]
    for row in mat:
        del row[-_sage_const_1 ]

    M = Matrix(mat)

    A_pol = M.determinant()
    #at this point, due to negative powers of t, A_pol has become a fraction field element
    
    if A_pol == _sage_const_0 :
        return (_sage_const_0 ,)
    else:
        #account for grid size by dividing by a power of 1-t
        A_pol = A_pol / ((_sage_const_1 -t)**(n-_sage_const_1 ))
        #valuation returns the lowest degree of the poly
        min_deg = A_pol.valuation()
        #normalize to go from free term to 2deg
        A_pol = A_pol*(t**(-min_deg))
        #cast in R, was fraction field element
        A_pol = R(A_pol)
        #reflect if leading=constant coefficient is negative
        if A_pol.constant_coefficient() < _sage_const_1 :
            A_pol = - A_pol
        #extract coefficients
        A_coeffs = A_pol.list()
        return tuple(A_coeffs)

if __name__ == '__main__':
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("-c", "--current", default="", help="the current directory")
    parser.add_argument("-d", "--destination", default="", help="the destination directory")
    parser.add_argument("-f", "--filename", default="", help="the filename containing grids to be calculated")
    args = vars(parser.parse_args())    

    curr_dir = args["current"]
    dest_dir = args["destination"]
    filename = args["filename"]
    
    pols_dict = dict()
    pathname = os.path.join(curr_dir,filename)
    grids = FileOperations.load_grids(pathname)
    if len(grids)>_sage_const_0 :
        for grid in grids:
            pol = get_alexander_polynomial(grid)
            if pol not in pols_dict.keys():
                pols_dict[pol] = set()
            pols_dict[pol].add(grid)
    for pol in pols_dict.keys():
        pol_str=str(pol)[_sage_const_1 :-_sage_const_1 ].replace(" ","")
        if pol_str[-_sage_const_1 ]==',':
            pol_str=pol_str[:-_sage_const_1 ]
        new_filename = f"{filename}_A={pol_str}"
        FileOperations.save_grids(pols_dict[pol],os.path.join(dest_dir,new_filename))

